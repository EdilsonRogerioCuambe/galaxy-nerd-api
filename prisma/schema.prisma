// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

model Administrator {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  avatar    String?
  biography String?
  location  String?
  banner    String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("administrators")
}

model Instructor {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  avatar    String?
  biography String?
  location  String?
  banner    String?
  role      Role      @default(INSTRUCTOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  courses   Course[]
  Answers   Answers[]
  Vote      Vote[]

  @@map("instructors")
}

model Course {
  id               String           @id @default(uuid())
  title            String           @unique
  description      String?
  price            String
  slug             String           @unique
  level            String?
  shortDescription String?
  duration         String?
  image            String?
  thumbnail        String?
  languages        Category[]
  instructor       Instructor?      @relation(fields: [instructorId], references: [id])
  instructorId     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  courseProgress   CourseProgress[]
  topics           Topic[]
  enrollments      Enrollment[]
  favorites        Favorite[]
  ratings          Rating[]

  @@map("courses")
}

model Rating {
  id        String   @id @default(uuid())
  rating    String
  comment   String?
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ratings")
}

model Student {
  id             String               @id @default(uuid())
  name           String
  email          String               @unique
  password       String
  avatar         String?
  biography      String?
  location       String?
  banner         String?
  phone          String?
  profession     String?
  birthDate      DateTime?
  works          String[]
  skills         String[]
  hobbies        String[]
  role           Role                 @default(STUDENT)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  courseProgress CourseProgress[]
  forum          Forum[]
  answers        Answers[]
  enrollments    Enrollment[]
  favorites      Favorite[]
  interests      Category[]
  ratings        Rating[]
  facebook       String?
  twitter        String?
  instagram      String?
  linkedin       String?
  youtube        String?
  website        String?
  github         String?
  vote           Vote[]
  scores         StudentQuizScore[]
  achievements   StudentAchievement[]
  lessonProgress LessonProgress[]

  @@map("students")
}

model Enrollment {
  id        String   @id @default(uuid())
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?
  createdAt DateTime @default(now())

  @@map("enrollments")
}

model Favorite {
  id        String   @id @default(uuid())
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  createdAt DateTime @default(now())

  @@map("favorites")
}

model Topic {
  id          String   @id @default(uuid())
  title       String   @unique
  icon        String?
  description String?
  order       String
  slug        String   @unique
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String

  @@map("topics")
}

model Lesson {
  id          String           @id @default(uuid())
  title       String           @unique
  description String?
  videoUrl    String
  duration    String
  slug        String           @unique
  order       String
  links       String[]
  topic       Topic            @relation(fields: [topicId], references: [id])
  topicId     String
  documents   Document[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  quiz        Quiz[]
  forum       Forum[]
  progress    LessonProgress[]
  problems    Problem[]

  @@map("lessons")
}

model Example {
  id          String   @id @default(uuid())
  inputText   String
  outputText  String
  explanation String
  img         String?
  problem     Problem? @relation(fields: [problemId], references: [id])
  problemId   String?
}

model Problem {
  id                  String    @id @default(uuid())
  title               String
  problemStatement    String
  examples            Example[]
  constraints         String
  order               String
  starterCode         String
  handlerFunction     String
  starterFunctionName String
  lesson              Lesson?   @relation(fields: [lessonId], references: [id])
  lessonId            String?
}

model Document {
  id          String   @id @default(uuid())
  title       String   @unique
  description String?
  fileUrl     String
  order       String
  lesson      Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("documents")
}

model Category {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String?
  icon            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  administratorId String?
  course          Course?  @relation(fields: [courseId], references: [id])
  courseId        String?
  student         Student? @relation(fields: [studentId], references: [id])
  studentId       String?

  @@map("categories")
}

model Quiz {
  id               String             @id @default(uuid())
  title            String
  description      String?
  lesson           Lesson?            @relation(fields: [lessonId], references: [id])
  lessonId         String?
  answer           String
  points           Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  quizOptions      QuizOption[]
  studentQuizScore StudentQuizScore[]

  @@map("quizzes")
}

model QuizOption {
  id        String   @id @default(uuid())
  option    String
  isCorrect Boolean
  quiz      Quiz?    @relation(fields: [quizId], references: [id])
  quizId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quiz_options")
}

model StudentQuizScore {
  id        String   @id @default(uuid())
  score     Int
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  quiz      Quiz?    @relation(fields: [quizId], references: [id])
  quizId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_quiz_scores")
}

model CourseProgress {
  id        String   @id @default(uuid())
  progress  String
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_progress")
}

model Forum {
  id          String    @id @default(uuid())
  title       String    @unique
  description String?
  slug        String    @unique
  answered    Boolean   @default(false)
  student     Student?  @relation(fields: [studentId], references: [id])
  studentId   String?
  lesson      Lesson?   @relation(fields: [lessonId], references: [id])
  lessonId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  answers     Answers[]

  @@map("forums")
}

model Answers {
  id           String      @id @default(uuid())
  content      String
  parent       Answers?    @relation("AnswersToAnswers", fields: [parentId], references: [id])
  parentId     String?
  forum        Forum?      @relation(fields: [forumId], references: [id])
  forumId      String?
  student      Student?    @relation(fields: [studentId], references: [id])
  studentId    String?
  instructor   Instructor? @relation(fields: [instructorId], references: [id])
  instructorId String?
  isAnswer     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  children     Answers[]   @relation("AnswersToAnswers")
  vote         Vote[]

  @@map("answers")
}

model Vote {
  id           String      @id @default(uuid())
  voteType     VoteType
  student      Student?    @relation(fields: [studentId], references: [id])
  studentId    String?
  instructor   Instructor? @relation(fields: [instructorId], references: [id])
  instructorId String?
  answer       Answers?    @relation(fields: [answerId], references: [id])
  answerId     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("votes")
}

model Achievement {
  id          String               @id @default(uuid())
  name        String
  description String
  points      Int // Pontos necessários para ganhar a conquista
  icon        String? // URL do ícone da conquista
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  students    StudentAchievement[]

  @@map("achievements")
}

model StudentAchievement {
  id            String      @id @default(uuid())
  student       Student     @relation(fields: [studentId], references: [id])
  studentId     String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("student_achievements")
}

model LessonProgress {
  id        String   @id @default(uuid())
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  String
  watched   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lesson_progresses")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
